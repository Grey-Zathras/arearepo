<!DOCTYPE html>
<html lang="en">
<head>
  <script src="/socket.io/socket.io.js"></script>
  <meta charset="UTF-8">
  <title><%= room.title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
	<link rel="stylesheet"  type="text/css" href="/codenames3.css">
	<!-- 

	 -->
	<style>
		html,
		body  {
			/*
			width: 100%;
			height: 100%;
			margin: 0;
			padding: 0; 
			*/
			background-color: lightblue;
			font-size: 16px;
		}

    .div-table {
      display: table;         
      width: auto;         
      background-color: #eee;         
      border: 1px solid #666666;         
      border-spacing: 5px; /* cellspacing:poor IE support for  this */
    }
    .div-table-row {
      display: table-row;
      width: auto;
      clear: both;
    }
    .div-table-col {
      float: left; /* fix for  buggy browsers */
      display: table-column;         
      width: 80px;         
      background-color: #ccc;  
    }
    .card.spy_opened{
			background-color: green;
		}
    .card.killer_opened{
      background-color: rgb(42, 43, 42);
    }
    .card.spy .card_text{
      background-color: green;
    }
    .card.killer .card_text{
      background-color: rgb(42, 43, 42);
    }
		.border1 {
			border: 1px solid red;
		}
    .header{
      width: 100%;
    }
    .navigation{
      float: right;
    }
    h1 {
      float:  left;
      display:contents;
    }
    .chat_header, .chat_msg {
      border: 1px solid;
      padding: 10px; 
    }

		/* responsive table (left area) */
		.cardspace {
			/* font-size: x-small; */
			float: left;
  		padding: 10px; 
			  /* padding-right: 10px; */
			width: max(300px, 68%);
			height: max(200px, 100%); 
		}
		/* responsive right area(game log)) */
		.log_area {
			float: left;
  			/* padding: 15px; */
			width: max(160px, 27%);
		}

		td.card {
			/* width: 208px; height: 134px; */
			/* 
			aspect-ratio:3;
			vertical-align: bottom;
			height: 20%; 
			*/
			width: 20%;
			text-align: center;
			border: 1px solid;
      background-color: rgb(182, 171, 117); /* rgb(206, 179, 26); */
      padding-bottom: 3%;
      padding-top: 3%;
		}
		.card_text {
			background-color: white;
			text-transform: uppercase;
			/* vertical-align: bottom; */
      display: inline-block;
		}

		/* option 1 for proportional size */
		.card_text.bottom_a {
			margin-top: 30%;
		}
		/* option 2  for proportional size */
		.card .v_spacer {
			width: 0;
			padding-top: 30%; 
			/* position: relative; */
		}


		/* option 3 outer-inner */
		.card .outer {
			width: 100%;
			padding-top: 60%; 
			position: relative;
		}
		.card .outer .inner {
			position: absolute;
			width: 100%;
			bottom: 0;
		}

    #messages  {
      list-style-type: none;
    }
    
		/* junk section */ 
		/*
		td .card {width: 20%;}

		div.parent {
			display: flex;
			height: 100%;
		}
		div.child {
			display: inline-block;
			align-self: flex-end;
			width: 100%;
		}
		
		.bottom_aligner2 {
			display: inline-block;
			height: 100%;
			vertical-align: bottom;
			width: 0px;
		}

		div.d {
			background-color: lightgrey;
			width: 150px;
			border: 15px solid green;
			padding: 50px;
			margin: 20px;
		}
		*/
	</style>
  <script>
      function getCookie(name) {
        var value = "; " + document.cookie;
        var parts = value.split("; " + name + "=");
        if (parts.length == 2) return parts.pop().split(";").shift();
      }

      function setCookie(name, value, days) {
        var expires = "";
        if (days) {
          var date = new Date();
          date.setTime(date.getTime() + (days*24*60*60*1000));
          expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
      }

      function addChatLine (text, msgclass=""){
        var item = document.createElement('li');
        if (msgclass==""){
          item.textContent = text;
        } else{
          var item1 = document.createElement('span');
          item1.className=msgclass;
          item.appendChild(item1);
          item1.textContent = text;
          
          console.log(item.outerHTML, text);

        }
        messages.insertBefore(item, messages.firstChild);
          //messages.appendChild(item);
          //window.scrollTo(0, document.body.scrollHeight);
        window.scrollTo(0, 0); // Scroll to the top to show the newest message
      }

      var activeClass=["inactive","active"];
      var memberTagID = ["Observers","Red_team", "Blue_team"];
      var player_class_array=['closed', 'spy', 'killer', 'spy_opened','civilian','killer_opened' ];
      var observer_class_array=[ 'spy_opened','civilian','killer_opened' ];
      var teams_list=["observer","Red","Blue"]; //for chat
      
      var socket = io();

      function ResetMembers(){
        for(var i =0; i<3; i++)
          document.getElementById(memberTagID[i]).innerHTML="";
      }
      function AddMemberLine ({username, team, active}) {
          var item = document.createElement('li');
          var item1 = document.createElement('span');
          //item1.className=activeClass[active];
          item.appendChild(item1);
          item1.textContent = username;
          item1.className=activeClass[active];
          document.getElementById(memberTagID[team]).appendChild(item);
      }
 
      function refreshTable(states, role){
        if (role=="player") {
          for (var i=0;i<25;i++){
            var card = document.getElementById('card['+i+']');
            card.className="card "+player_class_array[states[i] ];
          }
        }
    }

    window.onload = function() {
        var userName = getCookie("username");
        var userID = getCookie("userid");
        if (!userName) {
          userName = prompt("Please enter your name:");
          setCookie("username", userName, 7);
          userID = 0;
          //userID = socket.id;
          //setCookie("userid", userID, 7);
        }   else {
          if (!userID) {
            userID = 0;
            //userID = socket.id;
            //setCookie("userid", userID, 7);
          }
        } 

      var chatForm = document.getElementById('chatForm');
      var userForm = document.getElementById('userForm');
      var input = document.getElementById('input');
      //var roomInput = document.getElementById('room');
      document.getElementById('userName').value = userName;

      // Join a room
      //document.getElementById('joinRoom').onclick = function() {
        //var room = roomInput.value;
        var room = '<%= room.title %>';
        socket.emit('join room', { room: room, user: userName, room_id: <%= room.id %>, user_id: userID  });
        socket.emit('chat message', { room: room, msg: "welcome to chat" , user: userName});
      //};

      chatForm.addEventListener('submit', function(e) {
        e.preventDefault();
        if (input.value) {
          //var room = roomInput.value;
          socket.emit('chat message', { room: room, msg: input.value, user: userName  });
          console.log({ room: room, msg: input.value, user: userName  });
          input.value = '';
        }
      });

      userForm.addEventListener('submit', function(e) {
        e.preventDefault();
        console.log(userTeam.value);
        if (userTeam.value) {
          var team = userTeam.value;
          socket.emit('team change', { room: room, team: team, user: userName  });
          //console.log('team change event', { room: room, team: team, user: userName  });
          //input.value = '';
        }
      });

      socket.on('chat message', function(data) {
        addChatLine(data.user + ": " + data.msg);
      });
      socket.on('error message', function(data) {
        console.log('error message data', data);
        addChatLine(data,"errormsg");
      });
      socket.on('team scheme', function(data) {
        console.log('team scheme data',data);
        //addChatLine(data,"errormsg");
        refreshTable(data.states,"player")
        addChatLine("welcome to the "+teams_list[data.team]+" team" ,"errormsg");
      });
      socket.on('userID', function(data) {
        console.log('userID data',data,"socket.id",socket.id );
        userID = socket.id;
        setCookie("userid", userID, 7);
      });
      socket.on('roomData', function(data) {
        console.log('roomData',data);
        ResetMembers();
        data.users.forEach((element) => {
          console.dir(element);
          AddMemberLine (element);
        }); 
      });
      
      window.addEventListener("visibilitychange", (event) => {
        console.log("visibilitychange "+document.visibilityState );   
      });
      window.addEventListener('beforeunload', function (e) {
        // Uncomment below to cancel the popup and event
        //window.onbeforeunload = undefined;
        //return false; 

        // You can customize the message, but modern browsers often display their own default message for security reasons.
        var confirmationMessage = 'You have unsaved changes! Are you sure you want to leave?';
        console.log("unloading");
        socket.emit('chat message', { room: room, msg: "user leaving the room ", user: userName});

        // Some browsers may display this message to the user, prompting them to confirm if they want to leave the page.
        (e || window.event).returnValue = confirmationMessage; // Gecko + IE
        return confirmationMessage; // Webkit, Safari, Chrome etc.
      });
    };
  </script>
</head>
<body>
  <div class="header">
  <h1>Room name: <%= room.title %></h1>
  <div class="navigation">
    <a href="/">Back to home</a>
  </div>
  <p><%= room.content %></p>
  </div>
  <div>

  <div class="cardspace border1">
    
    <table class="border1" width="100%">
      <% for(var i =0; i<5; i++) { %>
        <tr>
        <% for(var j =0; j<5; j++) { 
          const ind=(i*5) + (j);
          const state_class_array = ['closed', 'spy', 'killer', 'spy_opened','civilian','killer_opened' ]; 
          //state_class_array[room.states[0][ind]] 
          %>
          <td  class="card " id="card[<%= ind %>]">
            <div class="card_text">
							<%= room.cards[ind] %>
						</div> 
            </td>
        <% } %>
        </tr>
      <% } %>
    </table>
  
  </div>
  <div class="log_area"  />
  <div class="chat_header">
    <div class="members div-table" >
      <div class="div-table-row" >
        <div class="div-table-col Observers">
          Observers
          <div id="Observers">
      
          </div>
        </div>
        <div class="div-table-col Red_team" >
          Red Team
          <div id="Red_team">
          </div>
        </div>
        <div class="div-table-col Blue_team">
          Blue Team
          <div id="Blue_team">
          </div>
        </div>
      </div>
    </div>
  <!--  <input id="room" autocomplete="off" placeholder="Room name <%= room.title %>"/>  -->
  <form id="userForm" action="">
    Your name: <input type="text" id="userName" name="userName" disabled /><br>
    Your team: <select  id="userTeam" name="userTeam">
      <option value="0">Observer, no team</option>
      <option value="1" style="color: red;">Red team</option>
      <option value="2" style="color: blue;">Blue team</option>
      </select>
      <button>Join</button>
      <br><br>
    </form>
    <form id="chatForm" action="">
        <input id="input" autocomplete="off" /><button>Send</button>
  </form>
  </div>
  <div class="chat_msg">
    <ul id="messages"></ul>
  </div>
</div>
</div>
</body>
</html>